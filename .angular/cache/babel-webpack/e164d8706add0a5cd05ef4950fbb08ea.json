{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor() {\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || 'null'));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(email, password) {\n      // Simulate a successful login response\n      const user = {\n        email,\n        token: 'fake-token'\n      };\n      return of(user).pipe(delay(1000), // Simulate network delay\n      map(user => {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n\n    register(user) {\n      // Simulate a successful registration response\n      return of({\n        message: 'User registered successfully'\n      }).pipe(delay(1000));\n    }\n\n    isAuthenticated() {\n      return !!this.currentUserValue;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}